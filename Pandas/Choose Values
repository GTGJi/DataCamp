for lab, row in brics.iterrows():
      print(lab + ":" + row['capital'])      
# lab shows labels of each row. row shows entire panda series of that row with attributes.
 
      brics.loc[lab, "name_length"] = len(row["country"])
OR:
brics["name_length"] = brics["country"].apply(len)

############################ Rows and Columns ###################################################
df['colname'].isin(["str1","str2"])
##################
df['column_name'] # return column with index, but the type is series. 
df[['column_name']] # can return a 1-d data frame

df[1:4] # print the 2 to 4 rows
loc (label-based)
[[]] return data frame too.

df.loc[["a","v"],["1","2"]] # print the intersections of a, b rows and 1,2 columns

df.loc[:,[]] # choose columns


iloc(integer position-based)
df.iloc[:,[3,4]]

 # Careful: for both loc and iloc, cannot use the expresion such as 1:3 in DOUBLE square brackets. 
            Can only use [1,2,3,4]

## Multiple conditions:
df[(df['a']>5) & (df['a'] <10)]

df.loc[(df['a']>5) & (df['a'] <10)]

df[np.logical_and(df['a']>5, df['a']<10)]


Example: 
# Merge the ridership, cal, and stations tables
ridership_cal_stations = ridership.merge(cal, on=['year','month','day']) \
							.merge(stations, on='station_id')

# Create a filter to filter ridership_cal_stations
filter_criteria = ((ridership_cal_stations['month'] == 7) 
                   & (ridership_cal_stations['day_type'] == 'Weekday') 
                   & (ridership_cal_stations['station_name'] == 'Wilson'))

# Use .loc and the filter to select for rides
print(ridership_cal_stations.loc[filter_criteria, 'rides'].sum())
